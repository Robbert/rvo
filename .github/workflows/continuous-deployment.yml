name: Continuous Deployment

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  install:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ^8.8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: |
          pnpm install
          pnpm ls --recursive

  lint:
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ^8.8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: |
          pnpm install
      - name: "Continuous Integration: lint"
        run: |
          pnpm run --if-present nx-lint

  build:
    runs-on: ubuntu-latest
    needs: [install, lint]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ^8.8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: |
          pnpm install
      - name: "Continuous Integration: build"
        env:
          BASE_URL: "/rvo/"
        run: |
          pnpm run --if-present nx-build
      - name: "Retain build artifact: website"
        uses: actions/upload-artifact@v3
        with:
          name: website
          path: packages/design-system-website/dist/
          retention-days: 1

      - name: "Retain build artifact: storybook"
        uses: actions/upload-artifact@v3
        with:
          name: storybook
          path: packages/storybook/dist/
          retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ^8.8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: |
          pnpm install
      - name: "Continuous Integration: test"
        run: |
          pnpm run --if-present nx-test

  publish-uxpin:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ^8.8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install

      - name: Push to UXPin
        continue-on-error: true
        if: "github.ref == 'refs/heads/master' && !contains(github.event.head_commit.message, 'skip ci')"
        run: |
          pnpm install && pnpx uxpin-merge push --token ${{ secrets.UXPIN_TOKEN }}
        working-directory: uxpin-merge

  publish-chromatic:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ^8.8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install

      - name: "Continuous Integration: build Storybook with animation disabled"
        env:
          STORYBOOK_REDUCED_MOTION: 1
        run: |
          pnpm run --if-present nx-build

      - name: Publish to Chromatic
        uses: chromaui/action@v1
        if: github.event.pull_request.draft == false
        with:
          autoAcceptChanges: master
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN_NLDESIGNSYSTEM }}
          storybookBuildDir: packages/storybook/dist/

  publish-website:
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout release branch
        uses: actions/checkout@v3

      - name: "Restore build artifact: website"
        uses: actions/download-artifact@v3
        with:
          name: website
          path: packages/design-system-website/dist/

      - name: Continuous Deployment to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4.4.0
        with:
          branch: gh-pages
          folder: packages/design-system-website/dist/

  publish-npm:
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ^8.8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: "Continuous Deployment: install"
        run: |
          pnpm install
          pnpm ls --recursive
      - name: "Continuous Deployment: build"
        run: |
          pnpm run --if-present nx-build
      - name: "Continuous Deployment: publish to GitHub repository"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}
          GIT_AUTHOR_NAME: "NL Design System"
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: "NL Design System"
        run: |
          git push --set-upstream origin HEAD
          pnpm run release
      - name: "Continuous Deployment: publish to npm"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          pnpm config set "//registry.npmjs.org/:_authToken" "${NPM_TOKEN}"
          pnpm run publish
          pnpm config delete "//registry.npmjs.org/:_authToken"
